/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * This is an example host based on your
 * local host's FQDN. Specify the NodeName
 * constant in `constants.conf` or use your
 * own description, e.g. "db-host-1".
 */

/*
 * These are generic `ping4` and `ping6`
 * checks applied to all hosts having the
 * `address` resp. `address6` attribute
 * defined.
 */
apply Service "ping4" {
  import "generic-service"

  check_command = "ping4"

  assign where host.address
}

apply Service "ping6" {
  import "generic-service"

  check_command = "ping6"

  assign where host.address6
}

/*
 * Apply the `ssh` service to all hosts
 * with the `address` attribute defined and
 * the custom attribute `os` set to `Linux`.
 */
apply Service "ssh" {
  import "generic-service"

  check_command = "ssh"

  assign where (host.address || host.address6) && host.vars.os == "Linux"
}



apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"

  check_command = "http"

  vars += config
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service "cluster zone" {
  import "generic-service"

  check_command = "cluster-zone"

  assign where host.vars.os == "Linux"
  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
  ignore where host.name == NodeName
}

apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
}

apply Service "load" {
  import "generic-service"

  check_command = "load"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "memory" {
  import "generic-service"

  check_command = "mem"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "updates" {
  import "generic-service"

  check_command = "yum"
  command_endpoint = host.name

  assign where host.vars.osfamily == "RedHat"
  ignore where host.vars.noagent
}

apply Service "CPU usage" {
  import "generic-service"

  check_command = "nscp-local-cpu"
  command_endpoint = host.name

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
}

apply Service "memory" {
  import "generic-service"

  check_command = "nscp-local-memory"
  command_endpoint = host.name

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "nscp-local-disk"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service for (srv => config in host.vars.services) {
  import "generic-service"

  check_command = "nscp-local-service"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service for (counter => config in host.vars.counters) {
  import "generic-service"

  check_command = "nscp-local-counter"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service "load" {
  import "generic-service"

  check_command = "by_ssh_load"

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
}

apply Service "memory" {
  import "generic-service"

  check_command = "by_ssh_mem"

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
}

apply Service "procs" {
  import "generic-service"

  check_command = "by_ssh_procs"

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
}

apply Service "swap" {
  import "generic-service"

  check_command = "by_ssh_swap"

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "by_ssh_disk"

  vars += config

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service "updates" {
  import "generic-service"

  check_command = "by_ssh_yum"

  assign where host.vars.osfamily == "RedHat"
  ignore where !host.vars.noagent
}
