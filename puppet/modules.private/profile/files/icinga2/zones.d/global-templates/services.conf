apply Service "ping4" {
  import "generic-service"

  check_command = "icmp"

  assign where host.address
}

apply Service "ping6" {
  import "generic-service"

  check_command = "ping6"

  assign where host.address6
}

apply Service "ssh" {
  import "generic-service"

  check_command = "ssh"

  assign where (host.address || host.address6) && host.vars.os == "Linux"
}

apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"

  check_command = "http"

  vars += config
}

apply Service for (mode => config in host.vars.mysql_health) {
  import "generic-service"

  check_command = "mysql_health"
  display_name = "MySQL " + mode.replace("-", " ")

  vars += config
  vars.mysql_health_mode = mode
}

apply Service for (db => config in host.vars.mysql_databases) {
  import "generic-service"

  check_command = "mysql_health"
  name = "db size " + db
  display_name = "MySQL db size: " + db

  vars += config
  vars.mysql_health_mode = "sql"
  vars.mysql_health_name = "SELECT sum(data_length + index_length)/1024/1024 FROM information_schema.TABLES where table_schema='" + db + "';"
  vars.mysql_health_name2 = "db"
  vars.mysql_health_units = "MB"
}

apply Service "Apache status" {
  import "generic-service"

  check_command = "apache-status"

  assign where "apache-webserver" in host.templates
}

apply Service for (ldap => config in host.vars.ldap) {
  import "generic-service"

  check_command = "ldap"
  if (config.ldap_endpoint || host.vars.ldap_endpoint) {
    command_endpoint = host.name
  }

  vars += config
}

apply Service "ntp peers" {
  import "generic-service"

  check_command = "ntp_peer"

  assign where host.vars.os == "Linux" && host.vars.ntp_address == host.address
}

apply Service for (db => config in host.vars.postgres) {
  import "generic-service"

  check_command = "postgres"

  vars += config

  assign where host.vars.os == "Linux"
}

apply Service for (msq => config in host.vars.jmx4perl) {
  import "generic-service"

  check_command = "jmx4perl"

  vars += config
}

apply Service "kerberos" {
  import "generic-service"

  check_command = "kdc"

  assign where host.vars.kdc_principal
}

apply Service for (data => config in host.vars.squid) {
  import "generic-service"

  check_command = "squid"

  vars += config
}

apply Service for (mode => config in host.vars.mssql_health) {
  import "generic-service"

  check_command = "mssql_health"
  display_name = "MSSQL " + mode.replace("-", " ")

  vars.mssql_health_mode = mode
  vars += config

  ignore where typeof(config) != Dictionary
}



apply Service "cluster zone" {
  import "generic-service"

  check_command = "cluster-zone"

  assign where host.vars.os == "Linux"
  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
  ignore where host.name == NodeName
}


/*
 * Service on Linux via Icinga 2 Agent
 */
apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service "load" {
  import "generic-service"

  check_command = "load"
  command_endpoint = host.name

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  vars.backup_downtime = "02:00-03:00"

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "ntp" {
  import "generic-service"

  check_command = "ntp_time"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
  ignore where host.vars.ntp_address == host.address
}

apply Service "memory" {
  import "generic-service"

  check_command = "mem"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "nslookup" {
  import "generic-service"

  check_command = "dns"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service for (db => config in host.vars.pgsql) {
  import "generic-service"

  check_command = "pgsql"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "updates" {
  import "generic-service"

  check_command = "yum"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}


/*
 * Service on Linux via SSH
 */
apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "by_ssh_disk"

  vars += config

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service "load" {
  import "generic-service"

  check_command = "by_ssh_load"

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  vars.backup_downtime = "02:00-03:00"

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
}

apply Service "procs" {
  import "generic-service"

  check_command = "by_ssh_procs"

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
}

apply Service "swap" {
  import "generic-service"

  check_command = "by_ssh_swap"

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
}

apply Service "ntp" {
  import "generic-service"

  check_command = "by_ssh_ntp_time"

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
  ignore where host.vars.ntp_address == host.address
}

apply Service "memory" {
  import "generic-service"

  check_command = "by_ssh_mem"

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
}

apply Service "swap" {
  import "generic-service"

  check_command = "by_ssh_swap"

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
}

apply Service "updates" {
  import "generic-service"

  check_command = "by_ssh_yum"

  assign where host.vars.os == "Linux"
  ignore where !host.vars.noagent
}


/*
 * Service on Windows via Icinga 2 Agent
 */
apply Service "CPU usage" {
  import "generic-service"

  check_command = "nscp-local-cpu"
  command_endpoint = host.name

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
}

apply Service "memory" {
  import "generic-service"

  check_command = "nscp-local-memory"
  command_endpoint = host.name

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "nscp-local-disk"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service for (services => config in host.vars.services) {
  import "generic-service"

  check_command = "nscp-local-service"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service for (counter => config in host.vars.counters) {
  import "generic-service"

  check_command = "nscp-local-counter"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service "ntp" {
  import "generic-service"

  check_command = "vbs-local-time"
  command_endpoint = host.name

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
}

apply Service "Active Directory" {
  import "generic-service"

  check_command = "vbs-local-ad"
  command_endpoint = host.name

  assign where host.vars.os == "Windows" && "ms-ad" in host.templates
  ignore where host.vars.noagent
}

apply Service "updates" {
  import "generic-service"

  check_interval = 120m
  retry_interval = 10m
  max_check_attempts = 2

  check_command = "ps-local-updates"
  command_endpoint = host.name

  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
}


/*
 * Services on Windows via NRPE
 */
apply Service "CPU usage" {
  import "generic-service"

  check_command = "nrpe-legacy-cpu"

  assign where host.vars.os == "Windows"
  ignore where !host.vars.noagent
}

apply Service "memory" {
  import "generic-service"

  check_command = "nrpe-legacy-memory"

  assign where host.vars.os == "Windows"
  ignore where !host.vars.noagent
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "nrpe-legacy-disk"

  vars += config

  assign where host.vars.os == "Windows"
  ignore where !host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service for (services => config in host.vars.services) {
  import "generic-service"

  check_command = "nrpe-legacy-service"

  vars += config

  assign where host.vars.os == "Windows"
  ignore where !host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service for (counter => config in host.vars.counters) {
  import "generic-service"

  check_command = "nrpe-legacy-counter"

  vars += config

  assign where host.vars.os == "Windows"
  ignore where !host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service "ntp" {
  import "generic-service"

  check_command = "nrpe-legacy-time"

  assign where host.vars.os == "Windows"
  ignore where !host.vars.noagent
}

apply Service "Active Directory" {
  import "generic-service"

  check_command = "nrpe"

  vars.nrpe_command = "check_ad"

  assign where host.vars.os == "Windows" && "ms-ad" in host.templates
  ignore where !host.vars.noagent
}

apply Service "updates" {
  import "generic-service"

  check_interval = 120m
  retry_interval = 5m
  max_check_attempts = 2

  check_command = "nrpe"
  vars.nrpe_command = "check_updates"
  vars.nrpe_timeout = 120

  assign where host.vars.os == "Windows"
  ignore where !host.vars.noagent
}


/*
 * Services VMware
 */
apply Service for (service => config in host.vars.vmware) {
  import "generic-service"

  check_command = config.check_command

  vars += config
}
